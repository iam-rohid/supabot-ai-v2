generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum UserRole {
    ADMIN @map("admin")
    USER  @map("user")

    @@map("user_role")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?

    role UserRole @default(USER)

    accounts     Account[]
    sessions     Session[]
    projectUsers ProjectUser[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Project {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    name      String   @db.VarChar(32)
    slug      String   @unique @db.VarChar(32)

    projectUsers       ProjectUser[]
    projectInvitations ProjectInvitation[]

    @@map("projects")
}

enum ProjectRole {
    OWNER  @map("owner")
    ADMIN  @map("admin")
    MEMBER @map("member")

    @@map("project_role")
}

model ProjectUser {
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    userId    String   @map("user_id")
    projectId String   @map("project_id")

    role ProjectRole @default(MEMBER)

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([projectId, userId])
    @@map("project_users")
}

model ProjectInvitation {
    email     String
    projectId String   @map("project_id")
    createdAt DateTime @default(now()) @map("created_at")
    expires   DateTime

    role ProjectRole @default(MEMBER)

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([projectId, email])
    @@map("project_invitations")
}
